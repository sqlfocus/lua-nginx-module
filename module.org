#+TITLE: 模块儿源码导读
#+AUTHOR: sqlfocus


* 模块儿定义及解析
ngx_http_lua_module =~/src/ngx_http_lua_module.c=

#+BEGIN_EXAMPLE
模块儿解析流程，参考https://github.com/sqlfocus/nginx/blob/code-note/nginx.org
-main()                             ${nginx-src-path}/src/core/nginx.c
  -ngx_preinit_modules()            初始化ngx_modules[].index及模块儿名
  -ngx_init_cycle()                 配置解析入口
    1-ngx_conf_parse()
      -ngx_conf_handler()           解析配置主入口
        -查找ngx_cycle_t->modules[]->commands[]
         获取对应的处理命令
         调用命令->set()
        -->ngx_http_block()         http{}级别解析
          -ngx_http_module_t->preconfiguration()
            -->ngx_http_lua_pre_config()     优化luajit, ~/src/ngx_http_lua_module.c
          -ngx_conf_parse()                  递归解析
            -->ngx_http_lua_rewrite_by_lua()
            -->ngx_http_lua_access_by_lua()
            -->ngx_http_lua_content_by_lua()
            -->ngx_http_lua_balancer_by_lua()
            -->ngx_http_lua_ssl_cert_by_lua()
            -->...
          -ngx_http_module_t->init_main_conf()
            -->ngx_http_lua_init_main_conf() 解析完毕后，初始化本模块儿主环境配置
          -ngx_http_merge_servers()          从高向低层级，合并解析结果
            -->ngx_http_lua_merge_srv_conf()     设置downstream SSL控制句柄，对应配置指令ssl_..._by_lua_file
            -->ngx_http_lua_merge_loc_conf()     创建用于cosocket的SSL环境
          -ngx_http_module_t->postconfiguration()
            -->ngx_http_lua_init()           创建Lua虚拟机, 注册各阶段处理句柄，暴露ngx等变量, ~/src/ngx_http_lua_module.c
          -ngx_http_init_phase_handlers()    注册阶段处理函数
          -ngx_http_optimize_servers()       创建监听插口
    1-ngx_init_modules()            模块儿启动前的特殊准备，主要针对集成的第三方
      -ngx_cycle_t->modules[]->init_module()
  ---------------单进程模式---------------
  -ngx_single_process_cycle()
    -ngx_modules[]->init_process()  模块儿进程级初始化
    -for(;;)                        主处理循环
  -----------master+worker模式------------
  -ngx_master_process_cycle()
    -ngx_start_worker_processes()
      -ngx_worker_process_cycle()   fork()后，worker进程的执行入口点
        -ngx_worker_process_init()
          -ngx_modules[]->init_process()
            -->ngx_http_lua_init_worker()  进程级别初始化, ~/src/ngx_http_lua_initworkerby.c
        -for(;;)                    主处理循环
#+END_EXAMPLE

** 新建Lua虚拟机
一般情况下，在解析完http{}配置环境后，创建Lua虚拟机并根据配置信息初始化
Lua配置环境，暴露全局变量ngx等，以便通过fork()被后续的worker进程继承。

#+BEGIN_EXAMPLE
-ngx_http_lua_init()                ~/src/ngx_http_lua_module.c
  -注册各phase处理函数
    -->ngx_http_lua_rewrite_handler()
    -->ngx_http_lua_access_handler()
    -->ngx_http_lua_log_handler()
  -ngx_http_lua_init_vm()           创建虚拟机，~/src/ngx_http_lua_util.c
    -ngx_http_lua_new_state()
      -luaL_newstate()                  创建虚拟机运行栈
      -luaL_openlibs()                  打开共享库
      -修改package.path/cpath搜索路径
      -ngx_http_lua_init_registry()     初始化注册表，用于模块儿间共享
      -ngx_http_lua_init_globals()      初始化全局变量，如ngx、ndk、__ngx_cycle等
        -ngx_http_lua_inject_ndk_api()
        -ngx_http_lua_inject_ngx_api()
  -ngx_http_lua_main_conf_t->init_handler()
  -->ngx_http_lua_init_by_file()    执行配置指令“init_by_lua_file”的初始化脚本
#+END_EXAMPLE

** 进程级初始化
worker进程运行前的初始化，被ngx_modules[]->init_process()调用执行；执行
配置指令“init_worker_by_lua_file”指定的脚本
#+BEGIN_EXAMPLE
-ngx_http_lua_init_worker()         ~/src/ngx_http_lua_initworkerby.c
  -ngx_http_lua_main_conf_t->init_worker_handler()
  -->ngx_http_lua_init_worker_by_file()
#+END_EXAMPLE

* PHASE处理函数
nginx lua模块儿也是通过注册进nginx的各个执行阶段，达到分阶段运行的目的的；
通过配置指令，XX_by_lua_file，注册对应的执行脚本。

除NGX_HTTP_CONTENT_PHASE外，其他阶段都是简单的注册回调函数到ngx_http_core
_main_conf_t->phases[]；因此这些回调函数可以和nginx的同类型配置语句在同阶
段执行，注册先后顺序决定了执行顺序。

内容处理阶段的函数回调注册到location配置的->handler处理句柄；在内容处理阶
段，不能同其他内容处理方式并存；因此，content_by_lua*和同级别的nginx内容
处理配置不能同时出现在同一个location中。

#+BEGIN_EXAMPLE
除NGX_HTTP_CONTENT_PHASE外，其他部分的初始化点及对应的函数
-ngx_http_lua_init()                    ~/src/ngx_http_lua_module.c
  -->ngx_http_lua_rewrite_by_lua()      NGX_HTTP_REWRITE_PHASE
  -->ngx_http_lua_access_by_lua()       NGX_HTTP_ACCESS_PHASE
  -->ngx_http_lua_log_handler()         NGX_HTTP_LOG_PHASE
  -->ngx_http_lua_content_handler()     NGX_HTTP_CONTENT_PHASE/ngx_http_core_loc_conf_t->handler
  -->ngx_http_lua_header_filter()       加入ngx_http_top_header_filter链表/header_filter_by_lua*
  -->ngx_http_lua_body_filter()         加入ngx_http_top_body_filter链表/body_filter_by_lua*
#+END_EXAMPLE

** 内容处理
类似于upstream处理等，在NGX_HTTP_FIND_CONFIG_PHASE阶段查找对应的location后，
在NGX_HTTP_CONTENT_PHASE阶段优先调用其->content_handler()处理报文。

#+BEGIN_EXAMPLE
-ngx_http_wait_request_handler()           请求处理入口
  -ngx_http_process_request_headers()
    -ngx_http_core_run_phases()
      -ngx_http_core_find_config_phase()   NGX_HTTP_FIND_CONFIG_PHASE阶段->checker
        -赋值ngx_http_request_t->content_handler = ngx_http_core_loc_conf_t->handler
      -ngx_http_core_content_phase()       NGX_HTTP_CONTENT_PHASE阶段->checker, ${nginx-src-path}/src/http/ngx_http_core_module.c
        -ngx_http_request_t->content_handler()
        -->ngx_http_lua_content_handler()  Lua内容阶段处理入口，~/src/ngx_http_lua_contentby.c
          -ngx_http_lua_read_body_resume()                快速恢复机制，~/src/ngx_http_lua_req_body.c
          -ngx_http_lua_content_handler_file()
            -ngx_http_lua_content_by_chunk()
              -ngx_http_lua_new_thread()                  新建协程
              -ngx_http_lua_run_thread()                  执行协程
              -ngx_http_lua_content_run_posted_threads()  执行其他协程
        -ngx_http_finalize_request()
#+END_EXAMPLE

* DONE 共享内存
  CLOSED: [2016-11-03 Thu 09:43]
本模块儿的共享内存也是借助nginx的共享内存管理机制；只是在此基础上封装了
Lua的环境，并提供给Lua使用而已(在Lua端看来，就是表，是不是越来越感觉到
有点函数式编程的意味了!!!)。

  - 配置指令                :: =lua_shared_dict=
  - 配置指令解析            :: =ngx_http_lua_shared_dict()/ngx_http_lua_directive.c=
  - 设置各指令的Lua处理句柄 :: =ngx_http_lua_inject_shdict_api()/ngx_http_lua_shdict.c=
  - ngx.shared.DICT.get()   :: =ngx_http_lua_shdict_get()=
  - ngx.shared.DICT.set()   :: =ngx_http_lua_shdict_set()=

* DONE 定时器
  CLOSED: [2016-11-03 Thu 11:03]
Lua的定时器本质利用了worker的定时器实现，定时器信息结构ngx_event_t加入红黑
树ngx_event_timer_rbtree，并在worker的for(;;)中以适当的时间粒度扫瞄，并执
行到期的任务。

那如何保存Lua环境信息呢？仅仅是在分配ngx_event_t结构时，紧挨着它分配了结构
体ngx_http_lua_timer_ctx_t，利用它存储。

  - 设置指令的处理句柄   ::  =ngx_http_lua_inject_timer_api()/ngx_http_lua_timer.c=
  - ngx.timer.at()       ::  =ngx_http_lua_ngx_timer_at()=
  - 定时器事件处理句柄   ::  =ngx_http_lua_timer_handler()=

* DONE Lua自定义PANIC函数
  CLOSED: [2016-11-07 Mon 10:58]
nginx的lua环境和nginx的c是隔离开的，即Lua脚本代码的严重错误不会影响nginx
的进程，有点类似于进程空间隔离了；它是利用longjmp机制实现的，一旦错误发生
直接跳过Lua脚本代码块儿，回归C环境，继续后续处理。

  #+BEGIN_EXAMPLE
  -ngx_http_lua_content_by_chunk()               内容处理脚本的执行入口
    -ngx_http_lua_run_thread()                   Lua协程入口，ngx_http_lua_util.c
      -lua_atpanic()                             定义Lua环境panic的入口点ngx_http_lua_atpanic()
      -NGX_LUA_EXCEPTION_TRY {
        -执行Lua脚本块儿
      -}
      -NGX_LUA_EXCEPTION_CATCH {                 longjmp异常处理点
        -仅输出，无实质动作
      -}
      -return NGX_ERROR


  #define NGX_LUA_EXCEPTION_TRY       \
    if (setjmp(ngx_http_lua_exception) == 0)

  #define NGX_LUA_EXCEPTION_CATCH     \
    else

  #define NGX_LUA_EXCEPTION_THROW(x)  \
    longjmp(ngx_http_lua_exception, (x))
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  -ngx_http_lua_atpanic()                        异常处理入口点，ngx_http_lua_exception.c
    -...错误处理，日志等
    -设置ngx_quit = 1
    -NGX_LUA_EXCEPTION_THROW()
  #+END_EXAMPLE

* balancer负载均衡器
通过配置指令 =http{upstream{balancer_by_lua_file xxx}}= 可以方便的设置七层
代理的负载均衡器，实现自定义负载均衡的功能。

提供的Lua环境的动态负载均衡模块儿不支持yield！！！

#+BEGIN_EXAMPLE
配置解析流程
-main()
  -ngx_init_cycle()
    -ngx_conf_parse()                         配置文件解析入口
      -ngx_conf_read_token()                  读取关键字
      -ngx_conf_handler()                     处理关键字
        -ngx_conf_t->cycle->modules[i]->commands->set()
        -->ngx_http_block()                   http{}处理入口
          -->ngx_http_core_server()             server{}处理入口
          -->ngx_http_core_location()           location{}处理入口
          -->ngx_http_upstream()                upstream{}处理入口，${nginx-src-path}/src/http/ngx_http_upstream.c
            -ngx_http_lua_balancer_by_lua()     balancer_by_lua_file入口，~/src/ngx_http_lua_balancer.c
              -设置ngx_http_upstream_srv_conf_t->peer.init_upstream = ngx_http_lua_balancer_init()
          -ngx_http_upstream_module->->ctx->init_main_conf()
          -->ngx_http_upstream_init_main_conf() 初始化upstream主配置
            -ngx_http_upstream_srv_conf_t->peer.init_upstream()
            -->ngx_http_lua_balancer_init()         自定义负载均衡环境初始化，~/src/ngx_http_lua_balancer.c
              -ngx_http_upstream_init_round_robin()
              -设置ngx_http_upstream_srv_conf_t->peer.init = ngx_http_lua_balancer_init_peer()
            -装载upstream支持的http属性头 ngx_http_upstream_headers_in[]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
请求负载流程
-ngx_http_proxy_handler()            proxy_pass处理入口
  -ngx_http_read_client_request_body()
    -ngx_http_upstream_init()
      -ngx_http_upstream_init_request()
        -ngx_http_upstream_conf_t->upstream->peer.init()     
          -->ngx_http_lua_balancer_init_peer()    ~/src/ngx_http_lua_balancer.c
            -RR环境初始化
            -设置获取服务器函数->peer.get/free
                                     初始化LB策略的环境
        -ngx_http_upstream_connect()
          -ngx_event_connect_peer()
            -ngx_peer_connection_t->get()
            -->ngx_http_lua_balancer_get_peer()   ~/src/ngx_http_lua_balancer.c
              -ngx_http_lua_srv_conf_t->balancer.handler()
              -->ngx_http_lua_balancer_handler_file()
                                    获取合适的后端服务器
            -connect()              建立连接
        -ngx_http_upstream_send_request()
                                    发送请求
#+END_EXAMPLE

#+BEGIN_EXAMPLE
LUA脚本需借助ngx.balancer.set_current_peer()将选择的IP、PORT赋值到对应的
数据结构ngx_http_request_t->upstream->peer.data(ngx_http_lua_balancer_peer_data_t)->sockaddr

ngx.balancer模块儿并没有随ngx_lua发布，而是放置在lua-resty-core模块儿中，
以纯Lua模块儿发布。

-set_current_peer()                  ${lua-resty-core}/lib/ngx/balancer.lua
  -getfenv(0).__ngx_req              获取对应的请求
  -ngx_http_lua_ffi_balancer_set_current_peer()
                                     ~/src/ngx_http_lua_balancer.c
    -ngx_parse_url()
    -赋值->sockaddr/socklen/host
#+END_EXAMPLE

* TODO SSL
ssl_certificate_by_lua_file
   ngx_http_lua_ssl_cert_handler()  ~/src/ngx_http_lua_ssl_certby.c
ssl_session_fetch_by_lua_file
   ngx_http_lua_ssl_sess_fetch_handler()
ssl_session_store_by_lua_file
   ngx_http_lua_ssl_sess_store_handler()

* cosocket
openresty实现了非阻塞的原生态插口结构ngx.socket，兼容LuaSocket库；并且
引入了一些新特性；目前支持ngx.socket.tcp/.udp/.stream

#+BEGIN_EXAMPLE
-ngx_http_lua_init()                ~/src/ngx_http_lua_module.c
  -ngx_http_lua_init_vm()           创建虚拟机，~/src/ngx_http_lua_util.c
    -ngx_http_lua_new_state()
      -luaL_newstate()                  创建虚拟机运行栈
      -luaL_openlibs()                  打开共享库
      -修改package.path/cpath搜索路径
      -ngx_http_lua_init_registry()     初始化注册表，用于模块儿间共享
      -ngx_http_lua_init_globals()      初始化全局变量，如ngx、ndk、__ngx_cycle等
        -ngx_http_lua_inject_ndk_api()
        -ngx_http_lua_inject_ngx_api()  注册非阻塞插口，cosocket
          -ngx_http_lua_inject_socket_tcp_api()
            -->ngx.socket.tcp/stream()处理函数ngx_http_lua_socket_tcp()
            -->新建元表，注册表索引ngx_http_lua_tcp_socket_metatable_key
              -ngx_http_lua_socket_tcp_connect()         "connect"
              -ngx_http_lua_socket_tcp_sslhandshake()    "sslhandshake"
              -ngx_http_lua_socket_tcp_receive()         "receive"
              -ngx_http_lua_socket_tcp_receiveuntil()    "receiveuntil"
              -ngx_http_lua_socket_tcp_send()            "send"
              -ngx_http_lua_socket_tcp_close()           "close"
              -ngx_http_lua_socket_tcp_setoption()       "setoption"
              -ngx_http_lua_socket_tcp_settimeout()      "settimeout"
              -ngx_http_lua_socket_tcp_getreusedtimes()  "getreusedtimes"
              -ngx_http_lua_socket_tcp_setkeepalive()    "setkeepalive"
          -ngx_http_lua_inject_socket_udp_api()
            -->ngx.socket.udp()处理函数ngx_http_lua_socket_udp()
#+END_EXAMPLE

** TCP
#+BEGIN_EXAMPLE
创建对象, ngx.socket.tcp()

-ngx_http_lua_socket_tcp()             ~/src/ngx_http_lua_socket_tcp.c
  -lua_createtable()                   创建对象
  -lua_setmetatable()                  指定元表为注册表索引ngx_http_lua_tcp_socket_metatable_key
#+END_EXAMPLE

#+BEGIN_EXAMPLE
连接服务器，tcpsock:connect()，目前不支持负载均衡
-ngx_http_lua_socket_tcp_connect()     ~/src/ngx_http_lua_socket_tcp.c
  -lua_newuserdata()                   新建上下文，并初始化
  -ngx_http_lua_get_keepalive_peer()   获取缓存的链路，成功则直接返回
  -ngx_parse_url()                     本地解析host:port
  -ngx_http_lua_socket_resolve_retval_handler()
    -ngx_event_connect_peer()                 连接
    -ngx_http_lua_socket_connected_handler()  后续connect报文处理句柄
      -ngx_http_lua_socket_test_connect()        测试连接是否OK
      -ngx_handle_write_event()                  暂时从EPOLL脱离，避免空转
      -ngx_handle_read_event()
      -ngx_http_lua_socket_handle_conn_success()
        -ngx_http_lua_ctx_t->resume_handler      设置重入函数=ngx_http_lua_socket_tcp_conn_resume()
  -lua_yield()                         连接ing时主动放弃CPU

连接服务器后，重入Lua虚拟机
-ngx_http_lua_socket_tcp_conn_resume()
  -ngx_http_lua_socket_tcp_resume_helper()
    -ngx_http_lua_socket_tcp_upstream_t->write_prepare_retvals()
    -->ngx_http_lua_socket_tcp_conn_retval_handler()
                                       注入返回值
    -ngx_http_lua_run_thread()         启动Lua虚拟机
#+END_EXAMPLE

* 参考
  - [[https://github.com/sqlfocus/nginx][nginx代码导读]]




