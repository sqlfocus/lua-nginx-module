#+TITLE: 模块儿源码导读
#+AUTHOR: sqlfocus


* 定义
ngx_http_lua_module =~/src/ngx_http_lua_module.c=

模块儿代码的阅读入口也在此，不过模块儿的初始化是穿插在nginx流程中的，
具体参考https://github.com/sqlfocus/nginx/blob/code-note/nginx.org。

* 新建Lua虚拟机
一般情况下，在解析完http{}配置环境后，创建Lua虚拟机并根据配置信息初始化
Lua配置环境，暴露全局变量ngx等，以便通过fork()被后续的worker进程继承。

  #+BEGIN_EXAMPLE
  -main()
    -ngx_init_cycle()
      -ngx_conf_parse()
        -ngx_conf_handler()
          -ngx_http_block()                           http{}解析入口，ngx_http.c
            -ngx_cycle_t->modules[]->ctx->preconfiguration()
            -ngx_conf_parse()                         递归配置解析
            -ngx_cycle_t->modules[]->ctx->postconfiguration()
              -ngx_http_lua_init()                    创建并初始化Lua虚拟机，ngx_http_lua_module.c
                -注册各phase处理函数
                -ngx_http_lua_init_vm()
                  -ngx_http_lua_new_state()
                    -luaL_newstate()                  创建虚拟机运行栈
                    -luaL_openlibs()                  打开共享库
                    -ngx_http_lua_init_registry()     初始化注册表，用于模块儿间共享
                    -ngx_http_lua_init_globals()      初始化全局变量，如ngx、ndk等
  -----------master+worker模式------------
    -ngx_master_process_cycle()
      -ngx_start_worker_processes()
        -ngx_worker_process_cycle()                   fork()后，worker进程的执行入口点
          -ngx_worker_process_init()
            -ngx_modules[]->init_process()            ~/src/os/unix/ngx_process_cycle.c
              -ngx_http_lua_init_worker()             worker进程运行前初始化
  #+END_EXAMPLE

* 对应phase的处理函数
nginx lua模块儿也是通过注册进nginx的各个执行阶段，达到分阶段运行的目的的；
通过配置指令，XX_by_lua*，注册对应的脚本和执行语句。

除NGX_HTTP_CONTENT_PHASE外，其他阶段都是简单的注册回调函数到
ngx_http_core_main_conf_t->phases[]；因此这些回调函数可以和nginx的同类型
配置语句在同阶段执行，注册先后顺序决定了执行顺序。

内容处理阶段的函数回调注册到location配置的->handler处理句柄；在内容处理
阶段，不能同其他内容处理方式并存；因此，content_by_lua*和同级别的nginx
内容处理配置不能同时出现在同一个location中。

  #+BEGIN_EXAMPLE
  除NGX_HTTP_CONTENT_PHASE外，其他部分的初始化点及对应的函数
  -ngx_http_lua_init()
    -ngx_http_lua_rewrite_handler()        对应NGX_HTTP_REWRITE_PHASE           rewrite_by_lua*
    -ngx_http_lua_access_handler()         对应NGX_HTTP_ACCESS_PHASE            access_by_lua*
    -ngx_http_lua_log_handler()            对应NGX_HTTP_LOG_PHASE               log_by_lua*
    -ngx_http_lua_header_filter()          加入ngx_http_top_header_filter链表   header_filter_by_lua*
    -ngx_http_lua_body_filter()            加入ngx_http_top_body_filter链表     body_filter_by_lua*
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  配置指令解析
  -ngx_http_lua_content_by_lua()           解析指令content_by_lua/content_by_lua_file
  -ngx_http_lua_content_by_lua_block()     解析指令content_by_lua_block
    -设置location处理句柄ngx_http_lua_content_handler()
    -设置内容处理句柄
       ngx_http_lua_content_handler_inline()    对应指令content_by_lua/_by_lua_block
       ngx_http_lua_content_handler_file()      对应指令content_by_lua_file

  NGX_HTTP_CONTENT_PHASE阶段
  -location定位后
    -ngx_http_update_location_config()
      -设置ngx_http_request_t->content_handler 
                                           = ngx_http_core_loc_conf_t->handler，
                                               即ngx_http_lua_content_handler()
  -ngx_http_core_run_phases()              phase处理入口，ngx_http_core_module.c
    -ngx_http_core_main_conf_t->phase_engine.handlers[NGX_HTTP_CONTENT_PHASE].checker()
    --ngx_http_core_content_phase()
      -ngx_http_request_t->content_handler()
      --ngx_http_lua_content_handler()     nginx lua模块儿的内容处理
  #+END_EXAMPLE

* DONE 内容处理
  CLOSED: [2016-11-03 Thu 18:32]
其他阶段处理和内容类似，以此阶段为例讲述处理流程；在 =ngx_http_lua_init()= 函
数中注册了各阶段的处理入口句柄，如内容为 =ngx_http_lua_content_handler()= ，此
函数只是沟通起C和Lua环境之间的关联；随后，正式进入Lua环境的脚本执行，入口函数
一般为对应配置指令的 =ngx_command_t->post= ，如 =content_by_lua= 指令的处理入
口为 =ngx_http_lua_content_handler_inline= 。

脚本的执行，都是启动单独的协程，然后在协程中处理的，以便于环境隔离；即便Lua
脚本崩溃，也不会危及到C代码。

  - 阶段入口 :: =ngx_http_lua_content_handler()/ngx_http_lua_contentby.c=
  - 对应的Lua环境入口  :: =ngx_http_lua_content_handler_inline/ngx_http_lua_content_handler_file()=

  #+BEGIN_EXAMPLE
  -ngx_http_lua_content_handler()
    -ngx_http_lua_content_handler_file()
      -ngx_http_lua_get_lua_vm()                 加载Lua虚拟机环境
      -ngx_http_lua_cache_loadfile()             加载脚本
      -ngx_http_lua_content_by_chunk()           执行脚本
        -ngx_http_lua_new_thread()
        -ngx_http_lua_set_req()
        -ngx_http_lua_run_thread()
  #+END_EXAMPLE

* DONE 共享内存
  CLOSED: [2016-11-03 Thu 09:43]
  - 配置指令                :: =lua_shared_dict=
  - 配置指令解析            :: =ngx_http_lua_shared_dict()/ngx_http_lua_directive.c=
  - 设置各指令的Lua处理句柄 :: =ngx_http_lua_inject_shdict_api()/ngx_http_lua_shdict.c=
  - ngx.shared.DICT.get()   :: =ngx_http_lua_shdict_get()=
  - ngx.shared.DICT.set()   :: =ngx_http_lua_shdict_set()=

* DONE 定时器
  CLOSED: [2016-11-03 Thu 11:03]
Lua的定时器本质利用了worker的定时器实现，定时器信息结构ngx_event_t加入红黑
树ngx_event_timer_rbtree，并在worker的for(;;)中以适当的时间粒度扫瞄，并执
行到期的任务。

那如何保存Lua环境信息呢？仅仅是在分配ngx_event_t结构时，紧挨着它分配了结构
体ngx_http_lua_timer_ctx_t，利用它存储。

  - 设置指令的处理句柄   ::  =ngx_http_lua_inject_timer_api()/ngx_http_lua_timer.c=
  - ngx.timer.at()       ::  =ngx_http_lua_ngx_timer_at()=
  - 定时器事件处理句柄   ::  =ngx_http_lua_timer_handler()=

* TODO 协程环境隔离
todo

* TODO HTTP请求的环境隔离
ngx_http_lua_create_ctx()/ngx_http_lua_util.h

* TODO 代码缓存与关闭
todo

* 参考
  - [[https://github.com/sqlfocus/nginx][nginx代码导读]]




